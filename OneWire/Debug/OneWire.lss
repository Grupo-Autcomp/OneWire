
OneWire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00804000  000008a2  00000936  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d7  00804004  00804004  0000093a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000093a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000096c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  000009b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000482f  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003324  00000000  00000000  0000538f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010b6  00000000  00000000  000086b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  0000976c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001eb8  00000000  00000000  00009a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000094a  00000000  00000000  0000b950  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000c29a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 13 03 	jmp	0x626	; 0x626 <__vector_18>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e8 <__ctors_end>:
  e8:	11 24       	eor	r1, r1
  ea:	1f be       	out	0x3f, r1	; 63
  ec:	cf ef       	ldi	r28, 0xFF	; 255
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	df e7       	ldi	r29, 0x7F	; 127
  f2:	de bf       	out	0x3e, r29	; 62

000000f4 <__do_copy_data>:
  f4:	10 e4       	ldi	r17, 0x40	; 64
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b0 e4       	ldi	r27, 0x40	; 64
  fa:	e2 ea       	ldi	r30, 0xA2	; 162
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 30       	cpi	r26, 0x04	; 4
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e4       	ldi	r18, 0x42	; 66
 110:	a4 e0       	ldi	r26, 0x04	; 4
 112:	b0 e4       	ldi	r27, 0x40	; 64
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 3d       	cpi	r26, 0xDB	; 219
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <main>
 122:	0c 94 4f 04 	jmp	0x89e	; 0x89e <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 12a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <system_init>
 12e:	08 95       	ret

00000130 <convert8to32>:
		_delay_us(100);
		
	}
}

uint32_t convert8to32(uint8_t color){
 130:	cf 92       	push	r12
 132:	df 92       	push	r13
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
	
	uint32_t data = 0x00000000;
	int8_t i = 7;
 138:	97 e0       	ldi	r25, 0x07	; 7
	}
}

uint32_t convert8to32(uint8_t color){
	
	uint32_t data = 0x00000000;
 13a:	c1 2c       	mov	r12, r1
 13c:	d1 2c       	mov	r13, r1
 13e:	76 01       	movw	r14, r12
	int8_t i = 7;
	
	while(i>=0){
 140:	36 c0       	rjmp	.+108    	; 0x1ae <convert8to32+0x7e>
		if (color & (1 << i)) {
 142:	29 2f       	mov	r18, r25
 144:	09 2e       	mov	r0, r25
 146:	00 0c       	add	r0, r0
 148:	33 0b       	sbc	r19, r19
 14a:	48 2f       	mov	r20, r24
 14c:	50 e0       	ldi	r21, 0x00	; 0
 14e:	09 2e       	mov	r0, r25
 150:	02 c0       	rjmp	.+4      	; 0x156 <convert8to32+0x26>
 152:	55 95       	asr	r21
 154:	47 95       	ror	r20
 156:	0a 94       	dec	r0
 158:	e2 f7       	brpl	.-8      	; 0x152 <convert8to32+0x22>
 15a:	40 ff       	sbrs	r20, 0
 15c:	14 c0       	rjmp	.+40     	; 0x186 <convert8to32+0x56>
			data |= (uint32_t) 0x00000008 << (i*4);
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	22 0f       	add	r18, r18
 164:	33 1f       	adc	r19, r19
 166:	48 e0       	ldi	r20, 0x08	; 8
 168:	50 e0       	ldi	r21, 0x00	; 0
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	04 c0       	rjmp	.+8      	; 0x178 <convert8to32+0x48>
 170:	44 0f       	add	r20, r20
 172:	55 1f       	adc	r21, r21
 174:	66 1f       	adc	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	2a 95       	dec	r18
 17a:	d2 f7       	brpl	.-12     	; 0x170 <convert8to32+0x40>
 17c:	c4 2a       	or	r12, r20
 17e:	d5 2a       	or	r13, r21
 180:	e6 2a       	or	r14, r22
 182:	f7 2a       	or	r15, r23
 184:	13 c0       	rjmp	.+38     	; 0x1ac <convert8to32+0x7c>
		}
		else{
			data |= (uint32_t) 0x0000000E << (i*4);
 186:	22 0f       	add	r18, r18
 188:	33 1f       	adc	r19, r19
 18a:	22 0f       	add	r18, r18
 18c:	33 1f       	adc	r19, r19
 18e:	4e e0       	ldi	r20, 0x0E	; 14
 190:	50 e0       	ldi	r21, 0x00	; 0
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	04 c0       	rjmp	.+8      	; 0x1a0 <convert8to32+0x70>
 198:	44 0f       	add	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	66 1f       	adc	r22, r22
 19e:	77 1f       	adc	r23, r23
 1a0:	2a 95       	dec	r18
 1a2:	d2 f7       	brpl	.-12     	; 0x198 <convert8to32+0x68>
 1a4:	c4 2a       	or	r12, r20
 1a6:	d5 2a       	or	r13, r21
 1a8:	e6 2a       	or	r14, r22
 1aa:	f7 2a       	or	r15, r23
		}
		i--;
 1ac:	91 50       	subi	r25, 0x01	; 1
uint32_t convert8to32(uint8_t color){
	
	uint32_t data = 0x00000000;
	int8_t i = 7;
	
	while(i>=0){
 1ae:	99 23       	and	r25, r25
 1b0:	44 f6       	brge	.-112    	; 0x142 <convert8to32+0x12>
		}
		i--;
	}
	
	return data;
}
 1b2:	c7 01       	movw	r24, r14
 1b4:	b6 01       	movw	r22, r12
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	df 90       	pop	r13
 1bc:	cf 90       	pop	r12
 1be:	08 95       	ret

000001c0 <mensagem>:

void mensagem(uint32_t red, uint32_t gre, uint32_t blu){
 1c0:	4f 92       	push	r4
 1c2:	5f 92       	push	r5
 1c4:	6f 92       	push	r6
 1c6:	7f 92       	push	r7
 1c8:	8f 92       	push	r8
 1ca:	9f 92       	push	r9
 1cc:	af 92       	push	r10
 1ce:	bf 92       	push	r11
 1d0:	cf 92       	push	r12
 1d2:	df 92       	push	r13
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	a0 97       	sbiw	r28, 0x20	; 32
 1e6:	cd bf       	out	0x3d, r28	; 61
 1e8:	de bf       	out	0x3e, r29	; 62
	uint8_t info_b1;
	uint8_t info_b2;
	uint8_t info_b3;
	uint8_t info_b4;
	
	info_r1 = (uint8_t) (0xFF & (red >> 24));	
 1ea:	49 2e       	mov	r4, r25
 1ec:	55 24       	eor	r5, r5
 1ee:	66 24       	eor	r6, r6
 1f0:	77 24       	eor	r7, r7
 1f2:	49 82       	std	Y+1, r4	; 0x01
 1f4:	5a 82       	std	Y+2, r5	; 0x02
 1f6:	6b 82       	std	Y+3, r6	; 0x03
 1f8:	7c 82       	std	Y+4, r7	; 0x04
	info_r2 = (uint8_t) (0xFF & (red >> 16));	
 1fa:	5c 01       	movw	r10, r24
 1fc:	cc 24       	eor	r12, r12
 1fe:	dd 24       	eor	r13, r13
 200:	ad 8e       	std	Y+29, r10	; 0x1d
 202:	be 8e       	std	Y+30, r11	; 0x1e
 204:	cf 8e       	std	Y+31, r12	; 0x1f
 206:	d8 a2       	std	Y+32, r13	; 0x20
	info_r3= (uint8_t) (0xFF & (red >> 8));	
 208:	87 2e       	mov	r8, r23
 20a:	98 2e       	mov	r9, r24
 20c:	a9 2e       	mov	r10, r25
 20e:	bb 24       	eor	r11, r11
	info_r4= (uint8_t) (0xFF & red);
	
	info_g1 = (uint8_t) (0xFF & (gre >> 24));
 210:	45 2e       	mov	r4, r21
 212:	55 24       	eor	r5, r5
 214:	66 24       	eor	r6, r6
 216:	77 24       	eor	r7, r7
 218:	4d 82       	std	Y+5, r4	; 0x05
 21a:	5e 82       	std	Y+6, r5	; 0x06
 21c:	6f 82       	std	Y+7, r6	; 0x07
 21e:	78 86       	std	Y+8, r7	; 0x08
	info_g2 = (uint8_t) (0xFF & (gre >> 16));
 220:	2a 01       	movw	r4, r20
 222:	66 24       	eor	r6, r6
 224:	77 24       	eor	r7, r7
 226:	49 86       	std	Y+9, r4	; 0x09
 228:	5a 86       	std	Y+10, r5	; 0x0a
 22a:	6b 86       	std	Y+11, r6	; 0x0b
 22c:	7c 86       	std	Y+12, r7	; 0x0c
	info_g3= (uint8_t) (0xFF & (gre >> 8));
 22e:	43 2e       	mov	r4, r19
 230:	54 2e       	mov	r5, r20
 232:	65 2e       	mov	r6, r21
 234:	77 24       	eor	r7, r7
 236:	4d 86       	std	Y+13, r4	; 0x0d
 238:	5e 86       	std	Y+14, r5	; 0x0e
 23a:	6f 86       	std	Y+15, r6	; 0x0f
 23c:	78 8a       	std	Y+16, r7	; 0x10
	info_g4= (uint8_t) (0xFF & gre);
	
	info_b1 = (uint8_t) (0xFF & (blu >> 24));
 23e:	41 2e       	mov	r4, r17
 240:	55 24       	eor	r5, r5
 242:	66 24       	eor	r6, r6
 244:	77 24       	eor	r7, r7
 246:	49 8a       	std	Y+17, r4	; 0x11
 248:	5a 8a       	std	Y+18, r5	; 0x12
 24a:	6b 8a       	std	Y+19, r6	; 0x13
 24c:	7c 8a       	std	Y+20, r7	; 0x14
	info_b2 = (uint8_t) (0xFF & (blu >> 16));
 24e:	28 01       	movw	r4, r16
 250:	66 24       	eor	r6, r6
 252:	77 24       	eor	r7, r7
 254:	4d 8a       	std	Y+21, r4	; 0x15
 256:	5e 8a       	std	Y+22, r5	; 0x16
 258:	6f 8a       	std	Y+23, r6	; 0x17
 25a:	78 8e       	std	Y+24, r7	; 0x18
	info_b3= (uint8_t) (0xFF & (blu >> 8));
 25c:	4f 2c       	mov	r4, r15
 25e:	50 2e       	mov	r5, r16
 260:	61 2e       	mov	r6, r17
 262:	77 24       	eor	r7, r7
 264:	49 8e       	std	Y+25, r4	; 0x19
 266:	5a 8e       	std	Y+26, r5	; 0x1a
 268:	6b 8e       	std	Y+27, r6	; 0x1b
 26a:	7c 8e       	std	Y+28, r7	; 0x1c
	info_b4= (uint8_t) (0xFF & blu);
	
	SPI0.DATA = info_r1;
 26c:	59 80       	ldd	r5, Y+1	; 0x01
 26e:	50 92 44 09 	sts	0x0944, r5	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 272:	4d 8c       	ldd	r4, Y+29	; 0x1d
 274:	5e 8c       	ldd	r5, Y+30	; 0x1e
 276:	6f 8c       	ldd	r6, Y+31	; 0x1f
 278:	78 a0       	ldd	r7, Y+32	; 0x20
	while (!(SPI0.INTFLAGS & SPI_IF_bm));
 27a:	e0 91 43 09 	lds	r30, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 27e:	ee 23       	and	r30, r30
 280:	e4 f7       	brge	.-8      	; 0x27a <__EEPROM_REGION_LENGTH__+0x7a>
 282:	4d 8e       	std	Y+29, r4	; 0x1d
 284:	5e 8e       	std	Y+30, r5	; 0x1e
 286:	6f 8e       	std	Y+31, r6	; 0x1f
 288:	78 a2       	std	Y+32, r7	; 0x20
	SPI0.DATA = info_r2;
 28a:	40 92 44 09 	sts	0x0944, r4	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));
 28e:	e0 91 43 09 	lds	r30, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 292:	ee 23       	and	r30, r30
 294:	e4 f7       	brge	.-8      	; 0x28e <__EEPROM_REGION_LENGTH__+0x8e>
	SPI0.DATA = info_r3;
 296:	80 92 44 09 	sts	0x0944, r8	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));
 29a:	e0 91 43 09 	lds	r30, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 29e:	ee 23       	and	r30, r30
 2a0:	e4 f7       	brge	.-8      	; 0x29a <__EEPROM_REGION_LENGTH__+0x9a>
	SPI0.DATA = info_r4;
 2a2:	60 93 44 09 	sts	0x0944, r22	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));
 2a6:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 2aa:	88 23       	and	r24, r24
 2ac:	e4 f7       	brge	.-8      	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
	
	SPI0.DATA = info_g1;
 2ae:	6d 80       	ldd	r6, Y+5	; 0x05
 2b0:	60 92 44 09 	sts	0x0944, r6	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));
 2b4:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 2b8:	88 23       	and	r24, r24
 2ba:	e4 f7       	brge	.-8      	; 0x2b4 <__EEPROM_REGION_LENGTH__+0xb4>
	SPI0.DATA = info_g2;
 2bc:	79 84       	ldd	r7, Y+9	; 0x09
 2be:	70 92 44 09 	sts	0x0944, r7	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));
 2c2:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 2c6:	88 23       	and	r24, r24
 2c8:	e4 f7       	brge	.-8      	; 0x2c2 <__EEPROM_REGION_LENGTH__+0xc2>
	SPI0.DATA = info_g3;
 2ca:	ad 84       	ldd	r10, Y+13	; 0x0d
 2cc:	a0 92 44 09 	sts	0x0944, r10	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));
 2d0:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 2d4:	88 23       	and	r24, r24
 2d6:	e4 f7       	brge	.-8      	; 0x2d0 <__EEPROM_REGION_LENGTH__+0xd0>
	SPI0.DATA = info_g4;
 2d8:	20 93 44 09 	sts	0x0944, r18	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));
 2dc:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 2e0:	88 23       	and	r24, r24
 2e2:	e4 f7       	brge	.-8      	; 0x2dc <__EEPROM_REGION_LENGTH__+0xdc>
	
	SPI0.DATA = info_b1;
 2e4:	b9 88       	ldd	r11, Y+17	; 0x11
 2e6:	b0 92 44 09 	sts	0x0944, r11	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));
 2ea:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 2ee:	88 23       	and	r24, r24
 2f0:	e4 f7       	brge	.-8      	; 0x2ea <__EEPROM_REGION_LENGTH__+0xea>
	SPI0.DATA = info_b2;
 2f2:	cd 88       	ldd	r12, Y+21	; 0x15
 2f4:	c0 92 44 09 	sts	0x0944, r12	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));
 2f8:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 2fc:	88 23       	and	r24, r24
 2fe:	e4 f7       	brge	.-8      	; 0x2f8 <__EEPROM_REGION_LENGTH__+0xf8>
	SPI0.DATA = info_b3;
 300:	d9 8c       	ldd	r13, Y+25	; 0x19
 302:	d0 92 44 09 	sts	0x0944, r13	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));
 306:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 30a:	88 23       	and	r24, r24
 30c:	e4 f7       	brge	.-8      	; 0x306 <__EEPROM_REGION_LENGTH__+0x106>
	SPI0.DATA = info_b4;
 30e:	e0 92 44 09 	sts	0x0944, r14	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));
 312:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 316:	88 23       	and	r24, r24
 318:	e4 f7       	brge	.-8      	; 0x312 <__EEPROM_REGION_LENGTH__+0x112>
}
 31a:	a0 96       	adiw	r28, 0x20	; 32
 31c:	cd bf       	out	0x3d, r28	; 61
 31e:	de bf       	out	0x3e, r29	; 62
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	1f 91       	pop	r17
 326:	0f 91       	pop	r16
 328:	ff 90       	pop	r15
 32a:	ef 90       	pop	r14
 32c:	df 90       	pop	r13
 32e:	cf 90       	pop	r12
 330:	bf 90       	pop	r11
 332:	af 90       	pop	r10
 334:	9f 90       	pop	r9
 336:	8f 90       	pop	r8
 338:	7f 90       	pop	r7
 33a:	6f 90       	pop	r6
 33c:	5f 90       	pop	r5
 33e:	4f 90       	pop	r4
 340:	08 95       	ret

00000342 <fill_matrix>:

void fill_matrix(LED matrix[N]){
 342:	cf 92       	push	r12
 344:	df 92       	push	r13
 346:	ef 92       	push	r14
 348:	ff 92       	push	r15
 34a:	0f 93       	push	r16
 34c:	1f 93       	push	r17
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	7c 01       	movw	r14, r24
	uint8_t R;
	uint8_t G;
	uint8_t B;
	
	for(uint8_t i=0; i<N; i++){
 354:	10 e0       	ldi	r17, 0x00	; 0
 356:	37 c0       	rjmp	.+110    	; 0x3c6 <fill_matrix+0x84>
		R = rand()%0xFF;
 358:	0e 94 dd 03 	call	0x7ba	; 0x7ba <rand>
 35c:	cf ef       	ldi	r28, 0xFF	; 255
 35e:	d0 e0       	ldi	r29, 0x00	; 0
 360:	be 01       	movw	r22, r28
 362:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__divmodhi4>
 366:	c8 2e       	mov	r12, r24
		G = rand()%0xFF;
 368:	0e 94 dd 03 	call	0x7ba	; 0x7ba <rand>
 36c:	be 01       	movw	r22, r28
 36e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__divmodhi4>
 372:	d8 2e       	mov	r13, r24
		B = rand()%0xFF;
 374:	0e 94 dd 03 	call	0x7ba	; 0x7ba <rand>
 378:	be 01       	movw	r22, r28
 37a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__divmodhi4>
 37e:	08 2f       	mov	r16, r24
		
		matrix[i].R_reg = convert8to32(R);
 380:	c1 2f       	mov	r28, r17
 382:	d0 e0       	ldi	r29, 0x00	; 0
 384:	ce 01       	movw	r24, r28
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	c8 0f       	add	r28, r24
 38c:	d9 1f       	adc	r29, r25
 38e:	cc 0f       	add	r28, r28
 390:	dd 1f       	adc	r29, r29
 392:	cc 0f       	add	r28, r28
 394:	dd 1f       	adc	r29, r29
 396:	ce 0d       	add	r28, r14
 398:	df 1d       	adc	r29, r15
 39a:	8c 2d       	mov	r24, r12
 39c:	0e 94 98 00 	call	0x130	; 0x130 <convert8to32>
 3a0:	68 83       	st	Y, r22
 3a2:	79 83       	std	Y+1, r23	; 0x01
 3a4:	8a 83       	std	Y+2, r24	; 0x02
 3a6:	9b 83       	std	Y+3, r25	; 0x03
		matrix[i].G_reg = convert8to32(G);
 3a8:	8d 2d       	mov	r24, r13
 3aa:	0e 94 98 00 	call	0x130	; 0x130 <convert8to32>
 3ae:	6c 83       	std	Y+4, r22	; 0x04
 3b0:	7d 83       	std	Y+5, r23	; 0x05
 3b2:	8e 83       	std	Y+6, r24	; 0x06
 3b4:	9f 83       	std	Y+7, r25	; 0x07
		matrix[i].B_reg = convert8to32(B);
 3b6:	80 2f       	mov	r24, r16
 3b8:	0e 94 98 00 	call	0x130	; 0x130 <convert8to32>
 3bc:	68 87       	std	Y+8, r22	; 0x08
 3be:	79 87       	std	Y+9, r23	; 0x09
 3c0:	8a 87       	std	Y+10, r24	; 0x0a
 3c2:	9b 87       	std	Y+11, r25	; 0x0b
void fill_matrix(LED matrix[N]){
	uint8_t R;
	uint8_t G;
	uint8_t B;
	
	for(uint8_t i=0; i<N; i++){
 3c4:	1f 5f       	subi	r17, 0xFF	; 255
 3c6:	1e 31       	cpi	r17, 0x1E	; 30
 3c8:	38 f2       	brcs	.-114    	; 0x358 <fill_matrix+0x16>
		
		matrix[i].R_reg = convert8to32(R);
		matrix[i].G_reg = convert8to32(G);
		matrix[i].B_reg = convert8to32(B);
	}
}
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	1f 91       	pop	r17
 3d0:	0f 91       	pop	r16
 3d2:	ff 90       	pop	r15
 3d4:	ef 90       	pop	r14
 3d6:	df 90       	pop	r13
 3d8:	cf 90       	pop	r12
 3da:	08 95       	ret

000003dc <main>:


int main(void)
{		
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 3dc:	0e 94 95 00 	call	0x12a	; 0x12a <atmel_start_init>
	
	SPI_0_init();
 3e0:	0e 94 01 03 	call	0x602	; 0x602 <SPI_0_init>
	SPI_0_enable();
 3e4:	0e 94 0d 03 	call	0x61a	; 0x61a <SPI_0_enable>

	fill_matrix(LED_Display);
 3e8:	8b e0       	ldi	r24, 0x0B	; 11
 3ea:	90 e4       	ldi	r25, 0x40	; 64
 3ec:	0e 94 a1 01 	call	0x342	; 0x342 <fill_matrix>
	
	for (uint8_t i=0; i<30; i++)
 3f0:	f1 2c       	mov	r15, r1
 3f2:	39 c0       	rjmp	.+114    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	{
		RED[i] = convert8to32(LED_Display[i].R_reg);
 3f4:	0f 2d       	mov	r16, r15
 3f6:	10 e0       	ldi	r17, 0x00	; 0
 3f8:	e8 01       	movw	r28, r16
 3fa:	cc 0f       	add	r28, r28
 3fc:	dd 1f       	adc	r29, r29
 3fe:	c0 0f       	add	r28, r16
 400:	d1 1f       	adc	r29, r17
 402:	cc 0f       	add	r28, r28
 404:	dd 1f       	adc	r29, r29
 406:	cc 0f       	add	r28, r28
 408:	dd 1f       	adc	r29, r29
 40a:	c5 5f       	subi	r28, 0xF5	; 245
 40c:	df 4b       	sbci	r29, 0xBF	; 191
 40e:	88 81       	ld	r24, Y
 410:	99 81       	ldd	r25, Y+1	; 0x01
 412:	aa 81       	ldd	r26, Y+2	; 0x02
 414:	bb 81       	ldd	r27, Y+3	; 0x03
 416:	0e 94 98 00 	call	0x130	; 0x130 <convert8to32>
 41a:	00 0f       	add	r16, r16
 41c:	11 1f       	adc	r17, r17
 41e:	00 0f       	add	r16, r16
 420:	11 1f       	adc	r17, r17
 422:	f8 01       	movw	r30, r16
 424:	ed 59       	subi	r30, 0x9D	; 157
 426:	fd 4b       	sbci	r31, 0xBD	; 189
 428:	60 83       	st	Z, r22
 42a:	71 83       	std	Z+1, r23	; 0x01
 42c:	82 83       	std	Z+2, r24	; 0x02
 42e:	93 83       	std	Z+3, r25	; 0x03
		GRE[i] = convert8to32(LED_Display[i].G_reg);
 430:	8c 81       	ldd	r24, Y+4	; 0x04
 432:	9d 81       	ldd	r25, Y+5	; 0x05
 434:	ae 81       	ldd	r26, Y+6	; 0x06
 436:	bf 81       	ldd	r27, Y+7	; 0x07
 438:	0e 94 98 00 	call	0x130	; 0x130 <convert8to32>
 43c:	f8 01       	movw	r30, r16
 43e:	ed 58       	subi	r30, 0x8D	; 141
 440:	fe 4b       	sbci	r31, 0xBE	; 190
 442:	60 83       	st	Z, r22
 444:	71 83       	std	Z+1, r23	; 0x01
 446:	82 83       	std	Z+2, r24	; 0x02
 448:	93 83       	std	Z+3, r25	; 0x03
		BLU[i] = convert8to32(LED_Display[i].B_reg);
 44a:	88 85       	ldd	r24, Y+8	; 0x08
 44c:	99 85       	ldd	r25, Y+9	; 0x09
 44e:	aa 85       	ldd	r26, Y+10	; 0x0a
 450:	bb 85       	ldd	r27, Y+11	; 0x0b
 452:	0e 94 98 00 	call	0x130	; 0x130 <convert8to32>
 456:	f8 01       	movw	r30, r16
 458:	e5 51       	subi	r30, 0x15	; 21
 45a:	fe 4b       	sbci	r31, 0xBE	; 190
 45c:	60 83       	st	Z, r22
 45e:	71 83       	std	Z+1, r23	; 0x01
 460:	82 83       	std	Z+2, r24	; 0x02
 462:	93 83       	std	Z+3, r25	; 0x03
	SPI_0_init();
	SPI_0_enable();

	fill_matrix(LED_Display);
	
	for (uint8_t i=0; i<30; i++)
 464:	f3 94       	inc	r15
 466:	8d e1       	ldi	r24, 0x1D	; 29
 468:	8f 15       	cp	r24, r15
 46a:	20 f6       	brcc	.-120    	; 0x3f4 <main+0x18>
		BLU[i] = convert8to32(LED_Display[i].B_reg);
	}
	
	/* Replace with your application code */
	while (1) {
		for (uint8_t i=0; i<N; i++)
 46c:	c0 e0       	ldi	r28, 0x00	; 0
 46e:	1e c0       	rjmp	.+60     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
		{	
			mensagem(RED[i], BLU[i], GRE[i]);
 470:	8c 2f       	mov	r24, r28
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	fc 01       	movw	r30, r24
 47e:	ed 58       	subi	r30, 0x8D	; 141
 480:	fe 4b       	sbci	r31, 0xBE	; 190
 482:	e0 80       	ld	r14, Z
 484:	f1 80       	ldd	r15, Z+1	; 0x01
 486:	02 81       	ldd	r16, Z+2	; 0x02
 488:	13 81       	ldd	r17, Z+3	; 0x03
 48a:	fc 01       	movw	r30, r24
 48c:	e5 51       	subi	r30, 0x15	; 21
 48e:	fe 4b       	sbci	r31, 0xBE	; 190
 490:	20 81       	ld	r18, Z
 492:	31 81       	ldd	r19, Z+1	; 0x01
 494:	42 81       	ldd	r20, Z+2	; 0x02
 496:	53 81       	ldd	r21, Z+3	; 0x03
 498:	fc 01       	movw	r30, r24
 49a:	ed 59       	subi	r30, 0x9D	; 157
 49c:	fd 4b       	sbci	r31, 0xBD	; 189
 49e:	60 81       	ld	r22, Z
 4a0:	71 81       	ldd	r23, Z+1	; 0x01
 4a2:	82 81       	ldd	r24, Z+2	; 0x02
 4a4:	93 81       	ldd	r25, Z+3	; 0x03
 4a6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <mensagem>
		BLU[i] = convert8to32(LED_Display[i].B_reg);
	}
	
	/* Replace with your application code */
	while (1) {
		for (uint8_t i=0; i<N; i++)
 4aa:	cf 5f       	subi	r28, 0xFF	; 255
 4ac:	ce 31       	cpi	r28, 0x1E	; 30
 4ae:	00 f3       	brcs	.-64     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b0:	87 e5       	ldi	r24, 0x57	; 87
 4b2:	92 e0       	ldi	r25, 0x02	; 2
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4ba:	00 00       	nop
 4bc:	d7 cf       	rjmp	.-82     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>

000004be <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
 4be:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	08 95       	ret

000004c6 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
 4c6:	44 e2       	ldi	r20, 0x24	; 36
 4c8:	68 ed       	ldi	r22, 0xD8	; 216
 4ca:	88 e6       	ldi	r24, 0x68	; 104
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	08 95       	ret

000004d6 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	08 95       	ret

000004da <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	08 c0       	rjmp	.+16     	; 0x4ee <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 4de:	e8 2f       	mov	r30, r24
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	e0 5f       	subi	r30, 0xF0	; 240
 4e4:	fb 4f       	sbci	r31, 0xFB	; 251
 4e6:	90 81       	ld	r25, Z
 4e8:	98 60       	ori	r25, 0x08	; 8
 4ea:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 4ec:	8f 5f       	subi	r24, 0xFF	; 255
 4ee:	88 30       	cpi	r24, 0x08	; 8
 4f0:	b0 f3       	brcs	.-20     	; 0x4de <mcu_init+0x4>
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	08 c0       	rjmp	.+16     	; 0x506 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 4f6:	e8 2f       	mov	r30, r24
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	e0 5d       	subi	r30, 0xD0	; 208
 4fc:	fb 4f       	sbci	r31, 0xFB	; 251
 4fe:	90 81       	ld	r25, Z
 500:	98 60       	ori	r25, 0x08	; 8
 502:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 504:	8f 5f       	subi	r24, 0xFF	; 255
 506:	88 30       	cpi	r24, 0x08	; 8
 508:	b0 f3       	brcs	.-20     	; 0x4f6 <mcu_init+0x1c>
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	08 c0       	rjmp	.+16     	; 0x51e <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 50e:	e8 2f       	mov	r30, r24
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	e0 5b       	subi	r30, 0xB0	; 176
 514:	fb 4f       	sbci	r31, 0xFB	; 251
 516:	90 81       	ld	r25, Z
 518:	98 60       	ori	r25, 0x08	; 8
 51a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 51c:	8f 5f       	subi	r24, 0xFF	; 255
 51e:	88 30       	cpi	r24, 0x08	; 8
 520:	b0 f3       	brcs	.-20     	; 0x50e <mcu_init+0x34>
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	08 c0       	rjmp	.+16     	; 0x536 <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 526:	e8 2f       	mov	r30, r24
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	e0 59       	subi	r30, 0x90	; 144
 52c:	fb 4f       	sbci	r31, 0xFB	; 251
 52e:	90 81       	ld	r25, Z
 530:	98 60       	ori	r25, 0x08	; 8
 532:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 534:	8f 5f       	subi	r24, 0xFF	; 255
 536:	88 30       	cpi	r24, 0x08	; 8
 538:	b0 f3       	brcs	.-20     	; 0x526 <mcu_init+0x4c>
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	08 c0       	rjmp	.+16     	; 0x54e <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 53e:	e8 2f       	mov	r30, r24
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	e0 57       	subi	r30, 0x70	; 112
 544:	fb 4f       	sbci	r31, 0xFB	; 251
 546:	90 81       	ld	r25, Z
 548:	98 60       	ori	r25, 0x08	; 8
 54a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 54c:	8f 5f       	subi	r24, 0xFF	; 255
 54e:	88 30       	cpi	r24, 0x08	; 8
 550:	b0 f3       	brcs	.-20     	; 0x53e <mcu_init+0x64>
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	08 c0       	rjmp	.+16     	; 0x566 <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 556:	e8 2f       	mov	r30, r24
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	e0 55       	subi	r30, 0x50	; 80
 55c:	fb 4f       	sbci	r31, 0xFB	; 251
 55e:	90 81       	ld	r25, Z
 560:	98 60       	ori	r25, 0x08	; 8
 562:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 564:	8f 5f       	subi	r24, 0xFF	; 255
 566:	88 30       	cpi	r24, 0x08	; 8
 568:	b0 f3       	brcs	.-20     	; 0x556 <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 56a:	08 95       	ret

0000056c <SPI_0_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 56c:	80 b1       	in	r24, 0x00	; 0
 56e:	8f 7d       	andi	r24, 0xDF	; 223
 570:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 572:	e5 e1       	ldi	r30, 0x15	; 21
 574:	f4 e0       	ldi	r31, 0x04	; 4
 576:	80 81       	ld	r24, Z
 578:	87 7f       	andi	r24, 0xF7	; 247
 57a:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 57c:	81 b1       	in	r24, 0x01	; 1
 57e:	8f 7e       	andi	r24, 0xEF	; 239
 580:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 582:	80 b1       	in	r24, 0x00	; 0
 584:	80 61       	ori	r24, 0x10	; 16
 586:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 588:	e4 e1       	ldi	r30, 0x14	; 20
 58a:	f4 e0       	ldi	r31, 0x04	; 4
 58c:	80 81       	ld	r24, Z
 58e:	87 7f       	andi	r24, 0xF7	; 247
 590:	80 83       	st	Z, r24
static inline void PORTA_pin_set_inverted(const uint8_t pin, const bool inverted)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
 592:	80 81       	ld	r24, Z
 594:	80 68       	ori	r24, 0x80	; 128
 596:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 598:	80 81       	ld	r24, Z
 59a:	88 7f       	andi	r24, 0xF8	; 248
 59c:	84 60       	ori	r24, 0x04	; 4
 59e:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 5a0:	81 b1       	in	r24, 0x01	; 1
 5a2:	8f 7b       	andi	r24, 0xBF	; 191
 5a4:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 5a6:	80 b1       	in	r24, 0x00	; 0
 5a8:	80 64       	ori	r24, 0x40	; 64
 5aa:	80 b9       	out	0x00, r24	; 0
	    // <true"> High
	    false);

	PA6_set_dir(PORT_DIR_OUT);

	SPI_0_init();
 5ac:	0e 94 01 03 	call	0x602	; 0x602 <SPI_0_init>
 5b0:	08 95       	ret

000005b2 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 5b2:	0e 94 6d 02 	call	0x4da	; 0x4da <mcu_init>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 5b6:	80 b1       	in	r24, 0x00	; 0
 5b8:	8b 7f       	andi	r24, 0xFB	; 251
 5ba:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 5bc:	e2 e1       	ldi	r30, 0x12	; 18
 5be:	f4 e0       	ldi	r31, 0x04	; 4
 5c0:	80 81       	ld	r24, Z
 5c2:	87 7f       	andi	r24, 0xF7	; 247
 5c4:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 5c6:	81 b1       	in	r24, 0x01	; 1
 5c8:	87 7f       	andi	r24, 0xF7	; 247
 5ca:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 5cc:	80 b1       	in	r24, 0x00	; 0
 5ce:	88 60       	ori	r24, 0x08	; 8
 5d0:	80 b9       	out	0x00, r24	; 0
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 5d2:	89 b1       	in	r24, 0x09	; 9
 5d4:	8f 7b       	andi	r24, 0xBF	; 191
 5d6:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 5d8:	88 b1       	in	r24, 0x08	; 8
 5da:	80 64       	ori	r24, 0x40	; 64
 5dc:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	LED0_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
 5de:	0e 94 63 02 	call	0x4c6	; 0x4c6 <CLKCTRL_init>

	SLPCTRL_init();
 5e2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <SLPCTRL_init>

	CPUINT_init();
 5e6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <CPUINT_init>

	SPI_0_initialization();
 5ea:	0e 94 b6 02 	call	0x56c	; 0x56c <SPI_0_initialization>

	BOD_init();
 5ee:	0e 94 5f 02 	call	0x4be	; 0x4be <BOD_init>
 5f2:	08 95       	ret

000005f4 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
 5f4:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
 5f6:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 5f8:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 5fa:	40 83       	st	Z, r20
	ret                             // Return to caller
 5fc:	08 95       	ret

000005fe <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	08 95       	ret

00000602 <SPI_0_init>:
                 after the previous one (i.e. data transfer phase
                 after control/command phase).
*/
void SPI_0_register_callback(spi_transfer_done_cb_t f)
{
	SPI_0_desc.cb = f;
 602:	e0 e4       	ldi	r30, 0x40	; 64
 604:	f9 e0       	ldi	r31, 0x09	; 9
 606:	83 e7       	ldi	r24, 0x73	; 115
 608:	80 83       	st	Z, r24
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	82 83       	std	Z+2, r24	; 0x02
 60e:	e4 e0       	ldi	r30, 0x04	; 4
 610:	f0 e4       	ldi	r31, 0x40	; 64
 612:	10 82       	st	Z, r1
 614:	15 82       	std	Z+5, r1	; 0x05
 616:	16 82       	std	Z+6, r1	; 0x06
 618:	08 95       	ret

0000061a <SPI_0_enable>:
 61a:	e0 e4       	ldi	r30, 0x40	; 64
 61c:	f9 e0       	ldi	r31, 0x09	; 9
 61e:	80 81       	ld	r24, Z
 620:	81 60       	ori	r24, 0x01	; 1
 622:	80 83       	st	Z, r24
 624:	08 95       	ret

00000626 <__vector_18>:
}

ISR(SPI0_INT_vect)
{
 626:	1f 92       	push	r1
 628:	0f 92       	push	r0
 62a:	0f b6       	in	r0, 0x3f	; 63
 62c:	0f 92       	push	r0
 62e:	11 24       	eor	r1, r1
 630:	0b b6       	in	r0, 0x3b	; 59
 632:	0f 92       	push	r0
 634:	2f 93       	push	r18
 636:	3f 93       	push	r19
 638:	4f 93       	push	r20
 63a:	5f 93       	push	r21
 63c:	6f 93       	push	r22
 63e:	7f 93       	push	r23
 640:	8f 93       	push	r24
 642:	9f 93       	push	r25
 644:	af 93       	push	r26
 646:	bf 93       	push	r27
 648:	ef 93       	push	r30
 64a:	ff 93       	push	r31
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPI0.DATA;
 64c:	e0 e4       	ldi	r30, 0x40	; 64
 64e:	f9 e0       	ldi	r31, 0x09	; 9
 650:	94 81       	ldd	r25, Z+4	; 0x04
	uint8_t wdata = 0;

	SPI0.INTFLAGS = SPI_RXCIF_bm;
 652:	80 e8       	ldi	r24, 0x80	; 128
 654:	83 83       	std	Z+3, r24	; 0x03

	if (SPI_0_desc.type != SPI_WRITE) {
 656:	80 91 08 40 	lds	r24, 0x4008	; 0x804008 <__data_end+0x4>
 65a:	82 30       	cpi	r24, 0x02	; 2
 65c:	29 f0       	breq	.+10     	; 0x668 <__vector_18+0x42>
		*SPI_0_desc.data = rdata;
 65e:	e0 91 05 40 	lds	r30, 0x4005	; 0x804005 <__data_end+0x1>
 662:	f0 91 06 40 	lds	r31, 0x4006	; 0x804006 <__data_end+0x2>
 666:	90 83       	st	Z, r25
	}

	SPI_0_desc.data++;
 668:	e4 e0       	ldi	r30, 0x04	; 4
 66a:	f0 e4       	ldi	r31, 0x40	; 64
 66c:	a1 81       	ldd	r26, Z+1	; 0x01
 66e:	b2 81       	ldd	r27, Z+2	; 0x02
 670:	9d 01       	movw	r18, r26
 672:	2f 5f       	subi	r18, 0xFF	; 255
 674:	3f 4f       	sbci	r19, 0xFF	; 255
 676:	21 83       	std	Z+1, r18	; 0x01
 678:	32 83       	std	Z+2, r19	; 0x02

	if (SPI_0_desc.type != SPI_READ)
 67a:	81 30       	cpi	r24, 0x01	; 1
 67c:	19 f0       	breq	.+6      	; 0x684 <__vector_18+0x5e>
		wdata = *SPI_0_desc.data;
 67e:	11 96       	adiw	r26, 0x01	; 1
 680:	9c 91       	ld	r25, X
 682:	01 c0       	rjmp	.+2      	; 0x686 <__vector_18+0x60>
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPI0.DATA;
	uint8_t wdata = 0;
 684:	90 e0       	ldi	r25, 0x00	; 0
	SPI_0_desc.data++;

	if (SPI_0_desc.type != SPI_READ)
		wdata = *SPI_0_desc.data;

	SPI_0_desc.size--;
 686:	e4 e0       	ldi	r30, 0x04	; 4
 688:	f0 e4       	ldi	r31, 0x40	; 64
 68a:	83 81       	ldd	r24, Z+3	; 0x03
 68c:	81 50       	subi	r24, 0x01	; 1
 68e:	83 83       	std	Z+3, r24	; 0x03
	// if more bytes to be transferred
	if (SPI_0_desc.size != 0) {
 690:	88 23       	and	r24, r24
 692:	19 f0       	breq	.+6      	; 0x69a <__vector_18+0x74>
		// more data to send, send a byte
		SPI0.DATA = wdata;
 694:	90 93 44 09 	sts	0x0944, r25	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 698:	0a c0       	rjmp	.+20     	; 0x6ae <__vector_18+0x88>
	}

	// if last byte has been transferred, update status
	// and optionally call callback
	else {
		SPI_0_desc.status = SPI_DONE;
 69a:	e4 e0       	ldi	r30, 0x04	; 4
 69c:	f0 e4       	ldi	r31, 0x40	; 64
 69e:	83 e0       	ldi	r24, 0x03	; 3
 6a0:	80 83       	st	Z, r24
		if (SPI_0_desc.cb != NULL) {
 6a2:	05 80       	ldd	r0, Z+5	; 0x05
 6a4:	f6 81       	ldd	r31, Z+6	; 0x06
 6a6:	e0 2d       	mov	r30, r0
 6a8:	30 97       	sbiw	r30, 0x00	; 0
 6aa:	09 f0       	breq	.+2      	; 0x6ae <__vector_18+0x88>
			SPI_0_desc.cb();
 6ac:	09 95       	icall
		}
	}
}
 6ae:	ff 91       	pop	r31
 6b0:	ef 91       	pop	r30
 6b2:	bf 91       	pop	r27
 6b4:	af 91       	pop	r26
 6b6:	9f 91       	pop	r25
 6b8:	8f 91       	pop	r24
 6ba:	7f 91       	pop	r23
 6bc:	6f 91       	pop	r22
 6be:	5f 91       	pop	r21
 6c0:	4f 91       	pop	r20
 6c2:	3f 91       	pop	r19
 6c4:	2f 91       	pop	r18
 6c6:	0f 90       	pop	r0
 6c8:	0b be       	out	0x3b, r0	; 59
 6ca:	0f 90       	pop	r0
 6cc:	0f be       	out	0x3f, r0	; 63
 6ce:	0f 90       	pop	r0
 6d0:	1f 90       	pop	r1
 6d2:	18 95       	reti

000006d4 <__divmodhi4>:
 6d4:	97 fb       	bst	r25, 7
 6d6:	07 2e       	mov	r0, r23
 6d8:	16 f4       	brtc	.+4      	; 0x6de <__divmodhi4+0xa>
 6da:	00 94       	com	r0
 6dc:	07 d0       	rcall	.+14     	; 0x6ec <__divmodhi4_neg1>
 6de:	77 fd       	sbrc	r23, 7
 6e0:	09 d0       	rcall	.+18     	; 0x6f4 <__divmodhi4_neg2>
 6e2:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__udivmodhi4>
 6e6:	07 fc       	sbrc	r0, 7
 6e8:	05 d0       	rcall	.+10     	; 0x6f4 <__divmodhi4_neg2>
 6ea:	3e f4       	brtc	.+14     	; 0x6fa <__divmodhi4_exit>

000006ec <__divmodhi4_neg1>:
 6ec:	90 95       	com	r25
 6ee:	81 95       	neg	r24
 6f0:	9f 4f       	sbci	r25, 0xFF	; 255
 6f2:	08 95       	ret

000006f4 <__divmodhi4_neg2>:
 6f4:	70 95       	com	r23
 6f6:	61 95       	neg	r22
 6f8:	7f 4f       	sbci	r23, 0xFF	; 255

000006fa <__divmodhi4_exit>:
 6fa:	08 95       	ret

000006fc <__udivmodhi4>:
 6fc:	aa 1b       	sub	r26, r26
 6fe:	bb 1b       	sub	r27, r27
 700:	51 e1       	ldi	r21, 0x11	; 17
 702:	07 c0       	rjmp	.+14     	; 0x712 <__udivmodhi4_ep>

00000704 <__udivmodhi4_loop>:
 704:	aa 1f       	adc	r26, r26
 706:	bb 1f       	adc	r27, r27
 708:	a6 17       	cp	r26, r22
 70a:	b7 07       	cpc	r27, r23
 70c:	10 f0       	brcs	.+4      	; 0x712 <__udivmodhi4_ep>
 70e:	a6 1b       	sub	r26, r22
 710:	b7 0b       	sbc	r27, r23

00000712 <__udivmodhi4_ep>:
 712:	88 1f       	adc	r24, r24
 714:	99 1f       	adc	r25, r25
 716:	5a 95       	dec	r21
 718:	a9 f7       	brne	.-22     	; 0x704 <__udivmodhi4_loop>
 71a:	80 95       	com	r24
 71c:	90 95       	com	r25
 71e:	bc 01       	movw	r22, r24
 720:	cd 01       	movw	r24, r26
 722:	08 95       	ret

00000724 <do_rand>:
 724:	8f 92       	push	r8
 726:	9f 92       	push	r9
 728:	af 92       	push	r10
 72a:	bf 92       	push	r11
 72c:	cf 92       	push	r12
 72e:	df 92       	push	r13
 730:	ef 92       	push	r14
 732:	ff 92       	push	r15
 734:	cf 93       	push	r28
 736:	df 93       	push	r29
 738:	ec 01       	movw	r28, r24
 73a:	68 81       	ld	r22, Y
 73c:	79 81       	ldd	r23, Y+1	; 0x01
 73e:	8a 81       	ldd	r24, Y+2	; 0x02
 740:	9b 81       	ldd	r25, Y+3	; 0x03
 742:	61 15       	cp	r22, r1
 744:	71 05       	cpc	r23, r1
 746:	81 05       	cpc	r24, r1
 748:	91 05       	cpc	r25, r1
 74a:	21 f4       	brne	.+8      	; 0x754 <do_rand+0x30>
 74c:	64 e2       	ldi	r22, 0x24	; 36
 74e:	79 ed       	ldi	r23, 0xD9	; 217
 750:	8b e5       	ldi	r24, 0x5B	; 91
 752:	97 e0       	ldi	r25, 0x07	; 7
 754:	2d e1       	ldi	r18, 0x1D	; 29
 756:	33 ef       	ldi	r19, 0xF3	; 243
 758:	41 e0       	ldi	r20, 0x01	; 1
 75a:	50 e0       	ldi	r21, 0x00	; 0
 75c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__divmodsi4>
 760:	49 01       	movw	r8, r18
 762:	5a 01       	movw	r10, r20
 764:	9b 01       	movw	r18, r22
 766:	ac 01       	movw	r20, r24
 768:	a7 ea       	ldi	r26, 0xA7	; 167
 76a:	b1 e4       	ldi	r27, 0x41	; 65
 76c:	0e 94 0b 04 	call	0x816	; 0x816 <__muluhisi3>
 770:	6b 01       	movw	r12, r22
 772:	7c 01       	movw	r14, r24
 774:	ac ee       	ldi	r26, 0xEC	; 236
 776:	b4 ef       	ldi	r27, 0xF4	; 244
 778:	a5 01       	movw	r20, r10
 77a:	94 01       	movw	r18, r8
 77c:	0e 94 19 04 	call	0x832	; 0x832 <__mulohisi3>
 780:	dc 01       	movw	r26, r24
 782:	cb 01       	movw	r24, r22
 784:	8c 0d       	add	r24, r12
 786:	9d 1d       	adc	r25, r13
 788:	ae 1d       	adc	r26, r14
 78a:	bf 1d       	adc	r27, r15
 78c:	b7 ff       	sbrs	r27, 7
 78e:	03 c0       	rjmp	.+6      	; 0x796 <do_rand+0x72>
 790:	01 97       	sbiw	r24, 0x01	; 1
 792:	a1 09       	sbc	r26, r1
 794:	b0 48       	sbci	r27, 0x80	; 128
 796:	88 83       	st	Y, r24
 798:	99 83       	std	Y+1, r25	; 0x01
 79a:	aa 83       	std	Y+2, r26	; 0x02
 79c:	bb 83       	std	Y+3, r27	; 0x03
 79e:	9f 77       	andi	r25, 0x7F	; 127
 7a0:	df 91       	pop	r29
 7a2:	cf 91       	pop	r28
 7a4:	ff 90       	pop	r15
 7a6:	ef 90       	pop	r14
 7a8:	df 90       	pop	r13
 7aa:	cf 90       	pop	r12
 7ac:	bf 90       	pop	r11
 7ae:	af 90       	pop	r10
 7b0:	9f 90       	pop	r9
 7b2:	8f 90       	pop	r8
 7b4:	08 95       	ret

000007b6 <rand_r>:
 7b6:	0c 94 92 03 	jmp	0x724	; 0x724 <do_rand>

000007ba <rand>:
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	90 e4       	ldi	r25, 0x40	; 64
 7be:	0c 94 92 03 	jmp	0x724	; 0x724 <do_rand>

000007c2 <srand>:
 7c2:	a0 e0       	ldi	r26, 0x00	; 0
 7c4:	b0 e0       	ldi	r27, 0x00	; 0
 7c6:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
 7ca:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 7ce:	a0 93 02 40 	sts	0x4002, r26	; 0x804002 <__DATA_REGION_ORIGIN__+0x2>
 7d2:	b0 93 03 40 	sts	0x4003, r27	; 0x804003 <__DATA_REGION_ORIGIN__+0x3>
 7d6:	08 95       	ret

000007d8 <__divmodsi4>:
 7d8:	05 2e       	mov	r0, r21
 7da:	97 fb       	bst	r25, 7
 7dc:	1e f4       	brtc	.+6      	; 0x7e4 <__divmodsi4+0xc>
 7de:	00 94       	com	r0
 7e0:	0e 94 03 04 	call	0x806	; 0x806 <__negsi2>
 7e4:	57 fd       	sbrc	r21, 7
 7e6:	07 d0       	rcall	.+14     	; 0x7f6 <__divmodsi4_neg2>
 7e8:	0e 94 1e 04 	call	0x83c	; 0x83c <__udivmodsi4>
 7ec:	07 fc       	sbrc	r0, 7
 7ee:	03 d0       	rcall	.+6      	; 0x7f6 <__divmodsi4_neg2>
 7f0:	4e f4       	brtc	.+18     	; 0x804 <__divmodsi4_exit>
 7f2:	0c 94 03 04 	jmp	0x806	; 0x806 <__negsi2>

000007f6 <__divmodsi4_neg2>:
 7f6:	50 95       	com	r21
 7f8:	40 95       	com	r20
 7fa:	30 95       	com	r19
 7fc:	21 95       	neg	r18
 7fe:	3f 4f       	sbci	r19, 0xFF	; 255
 800:	4f 4f       	sbci	r20, 0xFF	; 255
 802:	5f 4f       	sbci	r21, 0xFF	; 255

00000804 <__divmodsi4_exit>:
 804:	08 95       	ret

00000806 <__negsi2>:
 806:	90 95       	com	r25
 808:	80 95       	com	r24
 80a:	70 95       	com	r23
 80c:	61 95       	neg	r22
 80e:	7f 4f       	sbci	r23, 0xFF	; 255
 810:	8f 4f       	sbci	r24, 0xFF	; 255
 812:	9f 4f       	sbci	r25, 0xFF	; 255
 814:	08 95       	ret

00000816 <__muluhisi3>:
 816:	0e 94 40 04 	call	0x880	; 0x880 <__umulhisi3>
 81a:	a5 9f       	mul	r26, r21
 81c:	90 0d       	add	r25, r0
 81e:	b4 9f       	mul	r27, r20
 820:	90 0d       	add	r25, r0
 822:	a4 9f       	mul	r26, r20
 824:	80 0d       	add	r24, r0
 826:	91 1d       	adc	r25, r1
 828:	11 24       	eor	r1, r1
 82a:	08 95       	ret

0000082c <__mulshisi3>:
 82c:	b7 ff       	sbrs	r27, 7
 82e:	0c 94 0b 04 	jmp	0x816	; 0x816 <__muluhisi3>

00000832 <__mulohisi3>:
 832:	0e 94 0b 04 	call	0x816	; 0x816 <__muluhisi3>
 836:	82 1b       	sub	r24, r18
 838:	93 0b       	sbc	r25, r19
 83a:	08 95       	ret

0000083c <__udivmodsi4>:
 83c:	a1 e2       	ldi	r26, 0x21	; 33
 83e:	1a 2e       	mov	r1, r26
 840:	aa 1b       	sub	r26, r26
 842:	bb 1b       	sub	r27, r27
 844:	fd 01       	movw	r30, r26
 846:	0d c0       	rjmp	.+26     	; 0x862 <__udivmodsi4_ep>

00000848 <__udivmodsi4_loop>:
 848:	aa 1f       	adc	r26, r26
 84a:	bb 1f       	adc	r27, r27
 84c:	ee 1f       	adc	r30, r30
 84e:	ff 1f       	adc	r31, r31
 850:	a2 17       	cp	r26, r18
 852:	b3 07       	cpc	r27, r19
 854:	e4 07       	cpc	r30, r20
 856:	f5 07       	cpc	r31, r21
 858:	20 f0       	brcs	.+8      	; 0x862 <__udivmodsi4_ep>
 85a:	a2 1b       	sub	r26, r18
 85c:	b3 0b       	sbc	r27, r19
 85e:	e4 0b       	sbc	r30, r20
 860:	f5 0b       	sbc	r31, r21

00000862 <__udivmodsi4_ep>:
 862:	66 1f       	adc	r22, r22
 864:	77 1f       	adc	r23, r23
 866:	88 1f       	adc	r24, r24
 868:	99 1f       	adc	r25, r25
 86a:	1a 94       	dec	r1
 86c:	69 f7       	brne	.-38     	; 0x848 <__udivmodsi4_loop>
 86e:	60 95       	com	r22
 870:	70 95       	com	r23
 872:	80 95       	com	r24
 874:	90 95       	com	r25
 876:	9b 01       	movw	r18, r22
 878:	ac 01       	movw	r20, r24
 87a:	bd 01       	movw	r22, r26
 87c:	cf 01       	movw	r24, r30
 87e:	08 95       	ret

00000880 <__umulhisi3>:
 880:	a2 9f       	mul	r26, r18
 882:	b0 01       	movw	r22, r0
 884:	b3 9f       	mul	r27, r19
 886:	c0 01       	movw	r24, r0
 888:	a3 9f       	mul	r26, r19
 88a:	70 0d       	add	r23, r0
 88c:	81 1d       	adc	r24, r1
 88e:	11 24       	eor	r1, r1
 890:	91 1d       	adc	r25, r1
 892:	b2 9f       	mul	r27, r18
 894:	70 0d       	add	r23, r0
 896:	81 1d       	adc	r24, r1
 898:	11 24       	eor	r1, r1
 89a:	91 1d       	adc	r25, r1
 89c:	08 95       	ret

0000089e <_exit>:
 89e:	f8 94       	cli

000008a0 <__stop_program>:
 8a0:	ff cf       	rjmp	.-2      	; 0x8a0 <__stop_program>
