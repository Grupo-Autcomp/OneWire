
OneWire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00804000  00000328  000003bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000328  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00804004  00804004  000003c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000430  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004179  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000031a6  00000000  00000000  00004749  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d7f  00000000  00000000  000078ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  00008670  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ce6  00000000  00000000  000088e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000450  00000000  00000000  0000a5ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000aa1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 3b 01 	jmp	0x276	; 0x276 <__vector_18>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e8 <__ctors_end>:
  e8:	11 24       	eor	r1, r1
  ea:	1f be       	out	0x3f, r1	; 63
  ec:	cf ef       	ldi	r28, 0xFF	; 255
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	df e7       	ldi	r29, 0x7F	; 127
  f2:	de bf       	out	0x3e, r29	; 62

000000f4 <__do_copy_data>:
  f4:	10 e4       	ldi	r17, 0x40	; 64
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b0 e4       	ldi	r27, 0x40	; 64
  fa:	e8 e2       	ldi	r30, 0x28	; 40
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 30       	cpi	r26, 0x04	; 4
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	20 e4       	ldi	r18, 0x40	; 64
 110:	a4 e0       	ldi	r26, 0x04	; 4
 112:	b0 e4       	ldi	r27, 0x40	; 64
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 30       	cpi	r26, 0x0B	; 11
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 99 00 	call	0x132	; 0x132 <main>
 122:	0c 94 92 01 	jmp	0x324	; 0x324 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 12a:	0e 94 0d 01 	call	0x21a	; 0x21a <system_init>
 12e:	08 95       	ret

00000130 <convert8to32>:

LED LED_Display[1] = {
	{ 0x55, 0x00, 0xFF }
};

uint32_t convert8to32(uint8_t color){
 130:	ff cf       	rjmp	.-2      	; 0x130 <convert8to32>

00000132 <main>:
}

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 132:	0e 94 95 00 	call	0x12a	; 0x12a <atmel_start_init>
	
	uint32_t data_R;
	uint32_t data_G;
	uint32_t data_B;
	
	data_R = convert8to32(LED_Display->R_reg);
 136:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 13a:	0e 94 98 00 	call	0x130	; 0x130 <convert8to32>

0000013e <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
 13e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	08 95       	ret

00000146 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
 146:	44 e2       	ldi	r20, 0x24	; 36
 148:	68 ed       	ldi	r22, 0xD8	; 216
 14a:	88 e6       	ldi	r24, 0x68	; 104
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 28 01 	call	0x250	; 0x250 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	08 95       	ret

00000156 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	08 95       	ret

0000015a <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	08 c0       	rjmp	.+16     	; 0x16e <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 15e:	e8 2f       	mov	r30, r24
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	e0 5f       	subi	r30, 0xF0	; 240
 164:	fb 4f       	sbci	r31, 0xFB	; 251
 166:	90 81       	ld	r25, Z
 168:	98 60       	ori	r25, 0x08	; 8
 16a:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	88 30       	cpi	r24, 0x08	; 8
 170:	b0 f3       	brcs	.-20     	; 0x15e <mcu_init+0x4>
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	08 c0       	rjmp	.+16     	; 0x186 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 176:	e8 2f       	mov	r30, r24
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	e0 5d       	subi	r30, 0xD0	; 208
 17c:	fb 4f       	sbci	r31, 0xFB	; 251
 17e:	90 81       	ld	r25, Z
 180:	98 60       	ori	r25, 0x08	; 8
 182:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 184:	8f 5f       	subi	r24, 0xFF	; 255
 186:	88 30       	cpi	r24, 0x08	; 8
 188:	b0 f3       	brcs	.-20     	; 0x176 <mcu_init+0x1c>
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	08 c0       	rjmp	.+16     	; 0x19e <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 18e:	e8 2f       	mov	r30, r24
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	e0 5b       	subi	r30, 0xB0	; 176
 194:	fb 4f       	sbci	r31, 0xFB	; 251
 196:	90 81       	ld	r25, Z
 198:	98 60       	ori	r25, 0x08	; 8
 19a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 19c:	8f 5f       	subi	r24, 0xFF	; 255
 19e:	88 30       	cpi	r24, 0x08	; 8
 1a0:	b0 f3       	brcs	.-20     	; 0x18e <mcu_init+0x34>
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	08 c0       	rjmp	.+16     	; 0x1b6 <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 1a6:	e8 2f       	mov	r30, r24
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	e0 59       	subi	r30, 0x90	; 144
 1ac:	fb 4f       	sbci	r31, 0xFB	; 251
 1ae:	90 81       	ld	r25, Z
 1b0:	98 60       	ori	r25, 0x08	; 8
 1b2:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 1b4:	8f 5f       	subi	r24, 0xFF	; 255
 1b6:	88 30       	cpi	r24, 0x08	; 8
 1b8:	b0 f3       	brcs	.-20     	; 0x1a6 <mcu_init+0x4c>
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	08 c0       	rjmp	.+16     	; 0x1ce <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 1be:	e8 2f       	mov	r30, r24
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	e0 57       	subi	r30, 0x70	; 112
 1c4:	fb 4f       	sbci	r31, 0xFB	; 251
 1c6:	90 81       	ld	r25, Z
 1c8:	98 60       	ori	r25, 0x08	; 8
 1ca:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 1cc:	8f 5f       	subi	r24, 0xFF	; 255
 1ce:	88 30       	cpi	r24, 0x08	; 8
 1d0:	b0 f3       	brcs	.-20     	; 0x1be <mcu_init+0x64>
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	08 c0       	rjmp	.+16     	; 0x1e6 <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 1d6:	e8 2f       	mov	r30, r24
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	e0 55       	subi	r30, 0x50	; 80
 1dc:	fb 4f       	sbci	r31, 0xFB	; 251
 1de:	90 81       	ld	r25, Z
 1e0:	98 60       	ori	r25, 0x08	; 8
 1e2:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	88 30       	cpi	r24, 0x08	; 8
 1e8:	b0 f3       	brcs	.-20     	; 0x1d6 <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 1ea:	08 95       	ret

000001ec <SPI_0_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 1ec:	80 b1       	in	r24, 0x00	; 0
 1ee:	8f 7d       	andi	r24, 0xDF	; 223
 1f0:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 1f2:	e5 e1       	ldi	r30, 0x15	; 21
 1f4:	f4 e0       	ldi	r31, 0x04	; 4
 1f6:	80 81       	ld	r24, Z
 1f8:	87 7f       	andi	r24, 0xF7	; 247
 1fa:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 1fc:	81 b1       	in	r24, 0x01	; 1
 1fe:	8f 7e       	andi	r24, 0xEF	; 239
 200:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 202:	80 b1       	in	r24, 0x00	; 0
 204:	80 61       	ori	r24, 0x10	; 16
 206:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 208:	81 b1       	in	r24, 0x01	; 1
 20a:	8f 7b       	andi	r24, 0xBF	; 191
 20c:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 20e:	80 b1       	in	r24, 0x00	; 0
 210:	80 64       	ori	r24, 0x40	; 64
 212:	80 b9       	out	0x00, r24	; 0
	    // <true"> High
	    false);

	PA6_set_dir(PORT_DIR_OUT);

	SPI_0_init();
 214:	0e 94 2f 01 	call	0x25e	; 0x25e <SPI_0_init>
 218:	08 95       	ret

0000021a <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 21a:	0e 94 ad 00 	call	0x15a	; 0x15a <mcu_init>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 21e:	80 b1       	in	r24, 0x00	; 0
 220:	8b 7f       	andi	r24, 0xFB	; 251
 222:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 224:	e2 e1       	ldi	r30, 0x12	; 18
 226:	f4 e0       	ldi	r31, 0x04	; 4
 228:	80 81       	ld	r24, Z
 22a:	87 7f       	andi	r24, 0xF7	; 247
 22c:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 22e:	81 b1       	in	r24, 0x01	; 1
 230:	87 7f       	andi	r24, 0xF7	; 247
 232:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 234:	80 b1       	in	r24, 0x00	; 0
 236:	88 60       	ori	r24, 0x08	; 8
 238:	80 b9       	out	0x00, r24	; 0
	    // <true"> High
	    false);

	OUTPUT_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
 23a:	0e 94 a3 00 	call	0x146	; 0x146 <CLKCTRL_init>

	SLPCTRL_init();
 23e:	0e 94 2d 01 	call	0x25a	; 0x25a <SLPCTRL_init>

	CPUINT_init();
 242:	0e 94 ab 00 	call	0x156	; 0x156 <CPUINT_init>

	SPI_0_initialization();
 246:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_0_initialization>

	BOD_init();
 24a:	0e 94 9f 00 	call	0x13e	; 0x13e <BOD_init>
 24e:	08 95       	ret

00000250 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
 250:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
 252:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 254:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 256:	40 83       	st	Z, r20
	ret                             // Return to caller
 258:	08 95       	ret

0000025a <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	08 95       	ret

0000025e <SPI_0_init>:
                 after the previous one (i.e. data transfer phase
                 after control/command phase).
*/
void SPI_0_register_callback(spi_transfer_done_cb_t f)
{
	SPI_0_desc.cb = f;
 25e:	e0 e4       	ldi	r30, 0x40	; 64
 260:	f9 e0       	ldi	r31, 0x09	; 9
 262:	83 e3       	ldi	r24, 0x33	; 51
 264:	80 83       	st	Z, r24
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	82 83       	std	Z+2, r24	; 0x02
 26a:	e4 e0       	ldi	r30, 0x04	; 4
 26c:	f0 e4       	ldi	r31, 0x40	; 64
 26e:	10 82       	st	Z, r1
 270:	15 82       	std	Z+5, r1	; 0x05
 272:	16 82       	std	Z+6, r1	; 0x06
 274:	08 95       	ret

00000276 <__vector_18>:
}

ISR(SPI0_INT_vect)
{
 276:	1f 92       	push	r1
 278:	0f 92       	push	r0
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	0f 92       	push	r0
 27e:	11 24       	eor	r1, r1
 280:	0b b6       	in	r0, 0x3b	; 59
 282:	0f 92       	push	r0
 284:	2f 93       	push	r18
 286:	3f 93       	push	r19
 288:	4f 93       	push	r20
 28a:	5f 93       	push	r21
 28c:	6f 93       	push	r22
 28e:	7f 93       	push	r23
 290:	8f 93       	push	r24
 292:	9f 93       	push	r25
 294:	af 93       	push	r26
 296:	bf 93       	push	r27
 298:	ef 93       	push	r30
 29a:	ff 93       	push	r31
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPI0.DATA;
 29c:	e0 e4       	ldi	r30, 0x40	; 64
 29e:	f9 e0       	ldi	r31, 0x09	; 9
 2a0:	94 81       	ldd	r25, Z+4	; 0x04
	uint8_t wdata = 0;

	SPI0.INTFLAGS = SPI_RXCIF_bm;
 2a2:	80 e8       	ldi	r24, 0x80	; 128
 2a4:	83 83       	std	Z+3, r24	; 0x03

	if (SPI_0_desc.type != SPI_WRITE) {
 2a6:	80 91 08 40 	lds	r24, 0x4008	; 0x804008 <__data_end+0x4>
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	29 f0       	breq	.+10     	; 0x2b8 <__vector_18+0x42>
		*SPI_0_desc.data = rdata;
 2ae:	e0 91 05 40 	lds	r30, 0x4005	; 0x804005 <__data_end+0x1>
 2b2:	f0 91 06 40 	lds	r31, 0x4006	; 0x804006 <__data_end+0x2>
 2b6:	90 83       	st	Z, r25
	}

	SPI_0_desc.data++;
 2b8:	e4 e0       	ldi	r30, 0x04	; 4
 2ba:	f0 e4       	ldi	r31, 0x40	; 64
 2bc:	a1 81       	ldd	r26, Z+1	; 0x01
 2be:	b2 81       	ldd	r27, Z+2	; 0x02
 2c0:	9d 01       	movw	r18, r26
 2c2:	2f 5f       	subi	r18, 0xFF	; 255
 2c4:	3f 4f       	sbci	r19, 0xFF	; 255
 2c6:	21 83       	std	Z+1, r18	; 0x01
 2c8:	32 83       	std	Z+2, r19	; 0x02

	if (SPI_0_desc.type != SPI_READ)
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	19 f0       	breq	.+6      	; 0x2d4 <__vector_18+0x5e>
		wdata = *SPI_0_desc.data;
 2ce:	11 96       	adiw	r26, 0x01	; 1
 2d0:	9c 91       	ld	r25, X
 2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <__vector_18+0x60>
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPI0.DATA;
	uint8_t wdata = 0;
 2d4:	90 e0       	ldi	r25, 0x00	; 0
	SPI_0_desc.data++;

	if (SPI_0_desc.type != SPI_READ)
		wdata = *SPI_0_desc.data;

	SPI_0_desc.size--;
 2d6:	e4 e0       	ldi	r30, 0x04	; 4
 2d8:	f0 e4       	ldi	r31, 0x40	; 64
 2da:	83 81       	ldd	r24, Z+3	; 0x03
 2dc:	81 50       	subi	r24, 0x01	; 1
 2de:	83 83       	std	Z+3, r24	; 0x03
	// if more bytes to be transferred
	if (SPI_0_desc.size != 0) {
 2e0:	88 23       	and	r24, r24
 2e2:	19 f0       	breq	.+6      	; 0x2ea <__vector_18+0x74>
		// more data to send, send a byte
		SPI0.DATA = wdata;
 2e4:	90 93 44 09 	sts	0x0944, r25	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 2e8:	0a c0       	rjmp	.+20     	; 0x2fe <__vector_18+0x88>
	}

	// if last byte has been transferred, update status
	// and optionally call callback
	else {
		SPI_0_desc.status = SPI_DONE;
 2ea:	e4 e0       	ldi	r30, 0x04	; 4
 2ec:	f0 e4       	ldi	r31, 0x40	; 64
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	80 83       	st	Z, r24
		if (SPI_0_desc.cb != NULL) {
 2f2:	05 80       	ldd	r0, Z+5	; 0x05
 2f4:	f6 81       	ldd	r31, Z+6	; 0x06
 2f6:	e0 2d       	mov	r30, r0
 2f8:	30 97       	sbiw	r30, 0x00	; 0
 2fa:	09 f0       	breq	.+2      	; 0x2fe <__vector_18+0x88>
			SPI_0_desc.cb();
 2fc:	09 95       	icall
		}
	}
}
 2fe:	ff 91       	pop	r31
 300:	ef 91       	pop	r30
 302:	bf 91       	pop	r27
 304:	af 91       	pop	r26
 306:	9f 91       	pop	r25
 308:	8f 91       	pop	r24
 30a:	7f 91       	pop	r23
 30c:	6f 91       	pop	r22
 30e:	5f 91       	pop	r21
 310:	4f 91       	pop	r20
 312:	3f 91       	pop	r19
 314:	2f 91       	pop	r18
 316:	0f 90       	pop	r0
 318:	0b be       	out	0x3b, r0	; 59
 31a:	0f 90       	pop	r0
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	0f 90       	pop	r0
 320:	1f 90       	pop	r1
 322:	18 95       	reti

00000324 <_exit>:
 324:	f8 94       	cli

00000326 <__stop_program>:
 326:	ff cf       	rjmp	.-2      	; 0x326 <__stop_program>
