
OneWire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00804000  00000522  000005b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000522  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00804004  00804004  000005ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000630  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000046f2  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000328d  00000000  00000000  00004eca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f7d  00000000  00000000  00008157  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  000090d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e74  00000000  00000000  0000938c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000720  00000000  00000000  0000b200  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000b920  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 2a 02 	jmp	0x454	; 0x454 <__vector_18>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e8 <__ctors_end>:
  e8:	11 24       	eor	r1, r1
  ea:	1f be       	out	0x3f, r1	; 63
  ec:	cf ef       	ldi	r28, 0xFF	; 255
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	df e7       	ldi	r29, 0x7F	; 127
  f2:	de bf       	out	0x3e, r29	; 62

000000f4 <__do_copy_data>:
  f4:	10 e4       	ldi	r17, 0x40	; 64
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b0 e4       	ldi	r27, 0x40	; 64
  fa:	e2 e2       	ldi	r30, 0x22	; 34
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 30       	cpi	r26, 0x04	; 4
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	20 e4       	ldi	r18, 0x40	; 64
 110:	a4 e0       	ldi	r26, 0x04	; 4
 112:	b0 e4       	ldi	r27, 0x40	; 64
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a7 31       	cpi	r26, 0x17	; 23
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 26 01 	call	0x24c	; 0x24c <main>
 122:	0c 94 8f 02 	jmp	0x51e	; 0x51e <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 12a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <system_init>
 12e:	08 95       	ret

00000130 <convert8to32>:
		_delay_us(50);
		
	}
}

uint32_t convert8to32(uint8_t color){
 130:	cf 92       	push	r12
 132:	df 92       	push	r13
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
	
	uint32_t data = 0x00000000;
	int8_t i = 7;
 138:	97 e0       	ldi	r25, 0x07	; 7
	}
}

uint32_t convert8to32(uint8_t color){
	
	uint32_t data = 0x00000000;
 13a:	c1 2c       	mov	r12, r1
 13c:	d1 2c       	mov	r13, r1
 13e:	76 01       	movw	r14, r12
	int8_t i = 7;
	
	while(i>=0){
 140:	36 c0       	rjmp	.+108    	; 0x1ae <convert8to32+0x7e>
		if (color & (1 << i)) {
 142:	29 2f       	mov	r18, r25
 144:	09 2e       	mov	r0, r25
 146:	00 0c       	add	r0, r0
 148:	33 0b       	sbc	r19, r19
 14a:	48 2f       	mov	r20, r24
 14c:	50 e0       	ldi	r21, 0x00	; 0
 14e:	09 2e       	mov	r0, r25
 150:	02 c0       	rjmp	.+4      	; 0x156 <convert8to32+0x26>
 152:	55 95       	asr	r21
 154:	47 95       	ror	r20
 156:	0a 94       	dec	r0
 158:	e2 f7       	brpl	.-8      	; 0x152 <convert8to32+0x22>
 15a:	40 ff       	sbrs	r20, 0
 15c:	14 c0       	rjmp	.+40     	; 0x186 <convert8to32+0x56>
			data |= (uint32_t) 0x00000008 << (i*4);
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	22 0f       	add	r18, r18
 164:	33 1f       	adc	r19, r19
 166:	48 e0       	ldi	r20, 0x08	; 8
 168:	50 e0       	ldi	r21, 0x00	; 0
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	04 c0       	rjmp	.+8      	; 0x178 <convert8to32+0x48>
 170:	44 0f       	add	r20, r20
 172:	55 1f       	adc	r21, r21
 174:	66 1f       	adc	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	2a 95       	dec	r18
 17a:	d2 f7       	brpl	.-12     	; 0x170 <convert8to32+0x40>
 17c:	c4 2a       	or	r12, r20
 17e:	d5 2a       	or	r13, r21
 180:	e6 2a       	or	r14, r22
 182:	f7 2a       	or	r15, r23
 184:	13 c0       	rjmp	.+38     	; 0x1ac <convert8to32+0x7c>
		}
		else{
			data |= (uint32_t) 0x0000000E << (i*4);
 186:	22 0f       	add	r18, r18
 188:	33 1f       	adc	r19, r19
 18a:	22 0f       	add	r18, r18
 18c:	33 1f       	adc	r19, r19
 18e:	4e e0       	ldi	r20, 0x0E	; 14
 190:	50 e0       	ldi	r21, 0x00	; 0
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	04 c0       	rjmp	.+8      	; 0x1a0 <convert8to32+0x70>
 198:	44 0f       	add	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	66 1f       	adc	r22, r22
 19e:	77 1f       	adc	r23, r23
 1a0:	2a 95       	dec	r18
 1a2:	d2 f7       	brpl	.-12     	; 0x198 <convert8to32+0x68>
 1a4:	c4 2a       	or	r12, r20
 1a6:	d5 2a       	or	r13, r21
 1a8:	e6 2a       	or	r14, r22
 1aa:	f7 2a       	or	r15, r23
		}
		i--;
 1ac:	91 50       	subi	r25, 0x01	; 1
uint32_t convert8to32(uint8_t color){
	
	uint32_t data = 0x00000000;
	int8_t i = 7;
	
	while(i>=0){
 1ae:	99 23       	and	r25, r25
 1b0:	44 f6       	brge	.-112    	; 0x142 <convert8to32+0x12>
		}
		i--;
	}
	
	return data;
}
 1b2:	c7 01       	movw	r24, r14
 1b4:	b6 01       	movw	r22, r12
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	df 90       	pop	r13
 1bc:	cf 90       	pop	r12
 1be:	08 95       	ret

000001c0 <mensagem>:

bool mensagem(uint32_t data){
 1c0:	cf 92       	push	r12
 1c2:	df 92       	push	r13
 1c4:	ef 92       	push	r14
 1c6:	ff 92       	push	r15
 1c8:	cf 93       	push	r28
 1ca:	6b 01       	movw	r12, r22
 1cc:	7c 01       	movw	r14, r24
	uint8_t info1;
	uint8_t info2;
	uint8_t info3;
	uint8_t info4;
	
	info1= (uint8_t) (0xFF & (data >> 24));
 1ce:	8f 2d       	mov	r24, r15
 1d0:	99 27       	eor	r25, r25
 1d2:	aa 27       	eor	r26, r26
 1d4:	bb 27       	eor	r27, r27
	SPI0.DATA = info1;
 1d6:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (SPI_0_status_busy() & SPI_0_status_done());
 1da:	0e 94 81 02 	call	0x502	; 0x502 <SPI_0_status_busy>
 1de:	c8 2f       	mov	r28, r24
 1e0:	0e 94 88 02 	call	0x510	; 0x510 <SPI_0_status_done>
 1e4:	cc 23       	and	r28, r28
 1e6:	11 f0       	breq	.+4      	; 0x1ec <mensagem+0x2c>
 1e8:	81 11       	cpse	r24, r1
 1ea:	f7 cf       	rjmp	.-18     	; 0x1da <mensagem+0x1a>
	
	info2= (uint8_t) (0xFF & (data >> 16));
 1ec:	c7 01       	movw	r24, r14
 1ee:	aa 27       	eor	r26, r26
 1f0:	bb 27       	eor	r27, r27
	SPI0.DATA = info2;
 1f2:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (SPI_0_status_busy() & SPI_0_status_done());
 1f6:	0e 94 81 02 	call	0x502	; 0x502 <SPI_0_status_busy>
 1fa:	c8 2f       	mov	r28, r24
 1fc:	0e 94 88 02 	call	0x510	; 0x510 <SPI_0_status_done>
 200:	cc 23       	and	r28, r28
 202:	11 f0       	breq	.+4      	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
 204:	81 11       	cpse	r24, r1
 206:	f7 cf       	rjmp	.-18     	; 0x1f6 <mensagem+0x36>
	
	info3= (uint8_t) (0xFF & (data >> 8));
 208:	bb 27       	eor	r27, r27
 20a:	af 2d       	mov	r26, r15
 20c:	9e 2d       	mov	r25, r14
 20e:	8d 2d       	mov	r24, r13
	SPI0.DATA = info3;
 210:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (SPI_0_status_busy() & SPI_0_status_done());
 214:	0e 94 81 02 	call	0x502	; 0x502 <SPI_0_status_busy>
 218:	c8 2f       	mov	r28, r24
 21a:	0e 94 88 02 	call	0x510	; 0x510 <SPI_0_status_done>
 21e:	cc 23       	and	r28, r28
 220:	11 f0       	breq	.+4      	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
 222:	81 11       	cpse	r24, r1
 224:	f7 cf       	rjmp	.-18     	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
	
	info4= (uint8_t) (0xFF & data);
	SPI0.DATA = info4;
 226:	c0 92 44 09 	sts	0x0944, r12	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (SPI_0_status_busy() & SPI_0_status_done());
 22a:	0e 94 81 02 	call	0x502	; 0x502 <SPI_0_status_busy>
 22e:	c8 2f       	mov	r28, r24
 230:	0e 94 88 02 	call	0x510	; 0x510 <SPI_0_status_done>
 234:	cc 23       	and	r28, r28
 236:	11 f0       	breq	.+4      	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>
 238:	81 11       	cpse	r24, r1
 23a:	f7 cf       	rjmp	.-18     	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
	
	return SPI_0_status_done();
 23c:	0e 94 88 02 	call	0x510	; 0x510 <SPI_0_status_done>
 240:	cf 91       	pop	r28
 242:	ff 90       	pop	r15
 244:	ef 90       	pop	r14
 246:	df 90       	pop	r13
 248:	cf 90       	pop	r12
 24a:	08 95       	ret

0000024c <main>:
volatile uint32_t data_B;

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 24c:	0e 94 95 00 	call	0x12a	; 0x12a <atmel_start_init>
	
	SPI_0_init();
 250:	0e 94 1b 02 	call	0x436	; 0x436 <SPI_0_init>
	SPI_0_enable();
 254:	0e 94 24 02 	call	0x448	; 0x448 <SPI_0_enable>

	
	data_R = convert8to32(LED_Display->R_reg);
 258:	c0 e0       	ldi	r28, 0x00	; 0
 25a:	d0 e4       	ldi	r29, 0x40	; 64
 25c:	88 81       	ld	r24, Y
 25e:	0e 94 98 00 	call	0x130	; 0x130 <convert8to32>
 262:	60 93 13 40 	sts	0x4013, r22	; 0x804013 <data_R>
 266:	70 93 14 40 	sts	0x4014, r23	; 0x804014 <data_R+0x1>
 26a:	80 93 15 40 	sts	0x4015, r24	; 0x804015 <data_R+0x2>
 26e:	90 93 16 40 	sts	0x4016, r25	; 0x804016 <data_R+0x3>
	data_G = convert8to32(LED_Display->G_reg);
 272:	89 81       	ldd	r24, Y+1	; 0x01
 274:	0e 94 98 00 	call	0x130	; 0x130 <convert8to32>
 278:	60 93 0f 40 	sts	0x400F, r22	; 0x80400f <data_G>
 27c:	70 93 10 40 	sts	0x4010, r23	; 0x804010 <data_G+0x1>
 280:	80 93 11 40 	sts	0x4011, r24	; 0x804011 <data_G+0x2>
 284:	90 93 12 40 	sts	0x4012, r25	; 0x804012 <data_G+0x3>
	data_B = convert8to32(LED_Display->B_reg);
 288:	8a 81       	ldd	r24, Y+2	; 0x02
 28a:	0e 94 98 00 	call	0x130	; 0x130 <convert8to32>
 28e:	60 93 0b 40 	sts	0x400B, r22	; 0x80400b <data_B>
 292:	70 93 0c 40 	sts	0x400C, r23	; 0x80400c <data_B+0x1>
 296:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <data_B+0x2>
 29a:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <data_B+0x3>
	
	/* Replace with your application code */
	while (1) {
		for (uint8_t i=0; i<=30; i++)
 29e:	c0 e0       	ldi	r28, 0x00	; 0
 2a0:	1f c0       	rjmp	.+62     	; 0x2e0 <main+0x94>
		{
			mensagem(data_R);
 2a2:	60 91 13 40 	lds	r22, 0x4013	; 0x804013 <data_R>
 2a6:	70 91 14 40 	lds	r23, 0x4014	; 0x804014 <data_R+0x1>
 2aa:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <data_R+0x2>
 2ae:	90 91 16 40 	lds	r25, 0x4016	; 0x804016 <data_R+0x3>
 2b2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <mensagem>
			mensagem(data_G);
 2b6:	60 91 0f 40 	lds	r22, 0x400F	; 0x80400f <data_G>
 2ba:	70 91 10 40 	lds	r23, 0x4010	; 0x804010 <data_G+0x1>
 2be:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <data_G+0x2>
 2c2:	90 91 12 40 	lds	r25, 0x4012	; 0x804012 <data_G+0x3>
 2c6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <mensagem>
			mensagem(data_B);
 2ca:	60 91 0b 40 	lds	r22, 0x400B	; 0x80400b <data_B>
 2ce:	70 91 0c 40 	lds	r23, 0x400C	; 0x80400c <data_B+0x1>
 2d2:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <data_B+0x2>
 2d6:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <data_B+0x3>
 2da:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <mensagem>
	data_G = convert8to32(LED_Display->G_reg);
	data_B = convert8to32(LED_Display->B_reg);
	
	/* Replace with your application code */
	while (1) {
		for (uint8_t i=0; i<=30; i++)
 2de:	cf 5f       	subi	r28, 0xFF	; 255
 2e0:	cf 31       	cpi	r28, 0x1F	; 31
 2e2:	f8 f2       	brcs	.-66     	; 0x2a2 <main+0x56>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e4:	8b e2       	ldi	r24, 0x2B	; 43
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <main+0x9c>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <main+0xa2>
 2ee:	00 00       	nop
 2f0:	d6 cf       	rjmp	.-84     	; 0x29e <main+0x52>

000002f2 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
 2f2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	08 95       	ret

000002fa <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
 2fa:	44 e2       	ldi	r20, 0x24	; 36
 2fc:	68 ed       	ldi	r22, 0xD8	; 216
 2fe:	88 e6       	ldi	r24, 0x68	; 104
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 14 02 	call	0x428	; 0x428 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	08 95       	ret

0000030a <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	08 95       	ret

0000030e <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	08 c0       	rjmp	.+16     	; 0x322 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 312:	e8 2f       	mov	r30, r24
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	e0 5f       	subi	r30, 0xF0	; 240
 318:	fb 4f       	sbci	r31, 0xFB	; 251
 31a:	90 81       	ld	r25, Z
 31c:	98 60       	ori	r25, 0x08	; 8
 31e:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 320:	8f 5f       	subi	r24, 0xFF	; 255
 322:	88 30       	cpi	r24, 0x08	; 8
 324:	b0 f3       	brcs	.-20     	; 0x312 <mcu_init+0x4>
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	08 c0       	rjmp	.+16     	; 0x33a <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 32a:	e8 2f       	mov	r30, r24
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	e0 5d       	subi	r30, 0xD0	; 208
 330:	fb 4f       	sbci	r31, 0xFB	; 251
 332:	90 81       	ld	r25, Z
 334:	98 60       	ori	r25, 0x08	; 8
 336:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 338:	8f 5f       	subi	r24, 0xFF	; 255
 33a:	88 30       	cpi	r24, 0x08	; 8
 33c:	b0 f3       	brcs	.-20     	; 0x32a <mcu_init+0x1c>
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	08 c0       	rjmp	.+16     	; 0x352 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 342:	e8 2f       	mov	r30, r24
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	e0 5b       	subi	r30, 0xB0	; 176
 348:	fb 4f       	sbci	r31, 0xFB	; 251
 34a:	90 81       	ld	r25, Z
 34c:	98 60       	ori	r25, 0x08	; 8
 34e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 350:	8f 5f       	subi	r24, 0xFF	; 255
 352:	88 30       	cpi	r24, 0x08	; 8
 354:	b0 f3       	brcs	.-20     	; 0x342 <mcu_init+0x34>
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	08 c0       	rjmp	.+16     	; 0x36a <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 35a:	e8 2f       	mov	r30, r24
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	e0 59       	subi	r30, 0x90	; 144
 360:	fb 4f       	sbci	r31, 0xFB	; 251
 362:	90 81       	ld	r25, Z
 364:	98 60       	ori	r25, 0x08	; 8
 366:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 368:	8f 5f       	subi	r24, 0xFF	; 255
 36a:	88 30       	cpi	r24, 0x08	; 8
 36c:	b0 f3       	brcs	.-20     	; 0x35a <mcu_init+0x4c>
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	08 c0       	rjmp	.+16     	; 0x382 <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 372:	e8 2f       	mov	r30, r24
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	e0 57       	subi	r30, 0x70	; 112
 378:	fb 4f       	sbci	r31, 0xFB	; 251
 37a:	90 81       	ld	r25, Z
 37c:	98 60       	ori	r25, 0x08	; 8
 37e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 380:	8f 5f       	subi	r24, 0xFF	; 255
 382:	88 30       	cpi	r24, 0x08	; 8
 384:	b0 f3       	brcs	.-20     	; 0x372 <mcu_init+0x64>
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	08 c0       	rjmp	.+16     	; 0x39a <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 38a:	e8 2f       	mov	r30, r24
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	e0 55       	subi	r30, 0x50	; 80
 390:	fb 4f       	sbci	r31, 0xFB	; 251
 392:	90 81       	ld	r25, Z
 394:	98 60       	ori	r25, 0x08	; 8
 396:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 398:	8f 5f       	subi	r24, 0xFF	; 255
 39a:	88 30       	cpi	r24, 0x08	; 8
 39c:	b0 f3       	brcs	.-20     	; 0x38a <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 39e:	08 95       	ret

000003a0 <SPI_0_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 3a0:	80 b1       	in	r24, 0x00	; 0
 3a2:	8f 7d       	andi	r24, 0xDF	; 223
 3a4:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 3a6:	e5 e1       	ldi	r30, 0x15	; 21
 3a8:	f4 e0       	ldi	r31, 0x04	; 4
 3aa:	80 81       	ld	r24, Z
 3ac:	87 7f       	andi	r24, 0xF7	; 247
 3ae:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 3b0:	81 b1       	in	r24, 0x01	; 1
 3b2:	8f 7e       	andi	r24, 0xEF	; 239
 3b4:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 3b6:	80 b1       	in	r24, 0x00	; 0
 3b8:	80 61       	ori	r24, 0x10	; 16
 3ba:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 3bc:	e4 e1       	ldi	r30, 0x14	; 20
 3be:	f4 e0       	ldi	r31, 0x04	; 4
 3c0:	80 81       	ld	r24, Z
 3c2:	87 7f       	andi	r24, 0xF7	; 247
 3c4:	80 83       	st	Z, r24
static inline void PORTA_pin_set_inverted(const uint8_t pin, const bool inverted)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
 3c6:	80 81       	ld	r24, Z
 3c8:	80 68       	ori	r24, 0x80	; 128
 3ca:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 3cc:	80 81       	ld	r24, Z
 3ce:	88 7f       	andi	r24, 0xF8	; 248
 3d0:	84 60       	ori	r24, 0x04	; 4
 3d2:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 3d4:	81 b1       	in	r24, 0x01	; 1
 3d6:	8f 7b       	andi	r24, 0xBF	; 191
 3d8:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 3da:	80 b1       	in	r24, 0x00	; 0
 3dc:	80 64       	ori	r24, 0x40	; 64
 3de:	80 b9       	out	0x00, r24	; 0
	    // <true"> High
	    false);

	PA6_set_dir(PORT_DIR_OUT);

	SPI_0_init();
 3e0:	0e 94 1b 02 	call	0x436	; 0x436 <SPI_0_init>
 3e4:	08 95       	ret

000003e6 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 3e6:	0e 94 87 01 	call	0x30e	; 0x30e <mcu_init>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 3ea:	80 b1       	in	r24, 0x00	; 0
 3ec:	8b 7f       	andi	r24, 0xFB	; 251
 3ee:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 3f0:	e2 e1       	ldi	r30, 0x12	; 18
 3f2:	f4 e0       	ldi	r31, 0x04	; 4
 3f4:	80 81       	ld	r24, Z
 3f6:	87 7f       	andi	r24, 0xF7	; 247
 3f8:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 3fa:	81 b1       	in	r24, 0x01	; 1
 3fc:	87 7f       	andi	r24, 0xF7	; 247
 3fe:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 400:	80 b1       	in	r24, 0x00	; 0
 402:	88 60       	ori	r24, 0x08	; 8
 404:	80 b9       	out	0x00, r24	; 0
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 406:	89 b1       	in	r24, 0x09	; 9
 408:	8f 7b       	andi	r24, 0xBF	; 191
 40a:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 40c:	88 b1       	in	r24, 0x08	; 8
 40e:	80 64       	ori	r24, 0x40	; 64
 410:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	LED0_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
 412:	0e 94 7d 01 	call	0x2fa	; 0x2fa <CLKCTRL_init>

	SLPCTRL_init();
 416:	0e 94 19 02 	call	0x432	; 0x432 <SLPCTRL_init>

	CPUINT_init();
 41a:	0e 94 85 01 	call	0x30a	; 0x30a <CPUINT_init>

	SPI_0_initialization();
 41e:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <SPI_0_initialization>

	BOD_init();
 422:	0e 94 79 01 	call	0x2f2	; 0x2f2 <BOD_init>
 426:	08 95       	ret

00000428 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
 428:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
 42a:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 42c:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 42e:	40 83       	st	Z, r20
	ret                             // Return to caller
 430:	08 95       	ret

00000432 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	08 95       	ret

00000436 <SPI_0_init>:
 * \retval false SPI bus is not IDLE
 */
bool SPI_0_status_idle()
{
	return (SPI_0_desc.status == SPI_IDLE);
}
 436:	83 e7       	ldi	r24, 0x73	; 115
 438:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <__TEXT_REGION_LENGTH__+0x7e0940>
 43c:	e4 e0       	ldi	r30, 0x04	; 4
 43e:	f0 e4       	ldi	r31, 0x40	; 64
 440:	10 82       	st	Z, r1
 442:	15 82       	std	Z+5, r1	; 0x05
 444:	16 82       	std	Z+6, r1	; 0x06
 446:	08 95       	ret

00000448 <SPI_0_enable>:
 448:	e0 e4       	ldi	r30, 0x40	; 64
 44a:	f9 e0       	ldi	r31, 0x09	; 9
 44c:	80 81       	ld	r24, Z
 44e:	81 60       	ori	r24, 0x01	; 1
 450:	80 83       	st	Z, r24
 452:	08 95       	ret

00000454 <__vector_18>:
 454:	1f 92       	push	r1
 456:	0f 92       	push	r0
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	0f 92       	push	r0
 45c:	11 24       	eor	r1, r1
 45e:	0b b6       	in	r0, 0x3b	; 59
 460:	0f 92       	push	r0
 462:	2f 93       	push	r18
 464:	3f 93       	push	r19
 466:	4f 93       	push	r20
 468:	5f 93       	push	r21
 46a:	6f 93       	push	r22
 46c:	7f 93       	push	r23
 46e:	8f 93       	push	r24
 470:	9f 93       	push	r25
 472:	af 93       	push	r26
 474:	bf 93       	push	r27
 476:	ef 93       	push	r30
 478:	ff 93       	push	r31
 47a:	e0 e4       	ldi	r30, 0x40	; 64
 47c:	f9 e0       	ldi	r31, 0x09	; 9
 47e:	94 81       	ldd	r25, Z+4	; 0x04
 480:	80 e8       	ldi	r24, 0x80	; 128
 482:	83 83       	std	Z+3, r24	; 0x03
 484:	80 91 08 40 	lds	r24, 0x4008	; 0x804008 <__data_end+0x4>
 488:	82 30       	cpi	r24, 0x02	; 2
 48a:	29 f0       	breq	.+10     	; 0x496 <__vector_18+0x42>
 48c:	e0 91 05 40 	lds	r30, 0x4005	; 0x804005 <__data_end+0x1>
 490:	f0 91 06 40 	lds	r31, 0x4006	; 0x804006 <__data_end+0x2>
 494:	90 83       	st	Z, r25
 496:	e4 e0       	ldi	r30, 0x04	; 4
 498:	f0 e4       	ldi	r31, 0x40	; 64
 49a:	a1 81       	ldd	r26, Z+1	; 0x01
 49c:	b2 81       	ldd	r27, Z+2	; 0x02
 49e:	9d 01       	movw	r18, r26
 4a0:	2f 5f       	subi	r18, 0xFF	; 255
 4a2:	3f 4f       	sbci	r19, 0xFF	; 255
 4a4:	21 83       	std	Z+1, r18	; 0x01
 4a6:	32 83       	std	Z+2, r19	; 0x02
 4a8:	81 30       	cpi	r24, 0x01	; 1
 4aa:	19 f0       	breq	.+6      	; 0x4b2 <__vector_18+0x5e>
 4ac:	11 96       	adiw	r26, 0x01	; 1
 4ae:	9c 91       	ld	r25, X
 4b0:	01 c0       	rjmp	.+2      	; 0x4b4 <__vector_18+0x60>
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	e4 e0       	ldi	r30, 0x04	; 4
 4b6:	f0 e4       	ldi	r31, 0x40	; 64
 4b8:	83 81       	ldd	r24, Z+3	; 0x03
 4ba:	81 50       	subi	r24, 0x01	; 1
 4bc:	83 83       	std	Z+3, r24	; 0x03
 4be:	88 23       	and	r24, r24
 4c0:	19 f0       	breq	.+6      	; 0x4c8 <__vector_18+0x74>
 4c2:	90 93 44 09 	sts	0x0944, r25	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 4c6:	0a c0       	rjmp	.+20     	; 0x4dc <__vector_18+0x88>
 4c8:	e4 e0       	ldi	r30, 0x04	; 4
 4ca:	f0 e4       	ldi	r31, 0x40	; 64
 4cc:	83 e0       	ldi	r24, 0x03	; 3
 4ce:	80 83       	st	Z, r24
 4d0:	05 80       	ldd	r0, Z+5	; 0x05
 4d2:	f6 81       	ldd	r31, Z+6	; 0x06
 4d4:	e0 2d       	mov	r30, r0
 4d6:	30 97       	sbiw	r30, 0x00	; 0
 4d8:	09 f0       	breq	.+2      	; 0x4dc <__vector_18+0x88>
 4da:	09 95       	icall
 4dc:	ff 91       	pop	r31
 4de:	ef 91       	pop	r30
 4e0:	bf 91       	pop	r27
 4e2:	af 91       	pop	r26
 4e4:	9f 91       	pop	r25
 4e6:	8f 91       	pop	r24
 4e8:	7f 91       	pop	r23
 4ea:	6f 91       	pop	r22
 4ec:	5f 91       	pop	r21
 4ee:	4f 91       	pop	r20
 4f0:	3f 91       	pop	r19
 4f2:	2f 91       	pop	r18
 4f4:	0f 90       	pop	r0
 4f6:	0b be       	out	0x3b, r0	; 59
 4f8:	0f 90       	pop	r0
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	0f 90       	pop	r0
 4fe:	1f 90       	pop	r1
 500:	18 95       	reti

00000502 <SPI_0_status_busy>:
 * \retval true  SPI bus is BUSY
 * \retval false SPI bus is not BUSY
 */
bool SPI_0_status_busy()
{
	return (SPI_0_desc.status == SPI_BUSY);
 502:	90 91 04 40 	lds	r25, 0x4004	; 0x804004 <__data_end>
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	92 30       	cpi	r25, 0x02	; 2
 50a:	09 f0       	breq	.+2      	; 0x50e <SPI_0_status_busy+0xc>
 50c:	80 e0       	ldi	r24, 0x00	; 0
}
 50e:	08 95       	ret

00000510 <SPI_0_status_done>:
 * \retval true  SPI bus is DONE
 * \retval false SPI bus is not DONE
 */
bool SPI_0_status_done()
{
	return (SPI_0_desc.status == SPI_DONE);
 510:	90 91 04 40 	lds	r25, 0x4004	; 0x804004 <__data_end>
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	93 30       	cpi	r25, 0x03	; 3
 518:	09 f0       	breq	.+2      	; 0x51c <SPI_0_status_done+0xc>
 51a:	80 e0       	ldi	r24, 0x00	; 0
}
 51c:	08 95       	ret

0000051e <_exit>:
 51e:	f8 94       	cli

00000520 <__stop_program>:
 520:	ff cf       	rjmp	.-2      	; 0x520 <__stop_program>
